default_platform(:ios)
fastlane_require 'dotenv'

########################################################################
# Environment
########################################################################
Dotenv.load('~/.simplenotemacos-env.default')
ENV[GHHELPER_REPO="Automattic/simplenote-macos"]
ENV["PROJECT_NAME"]="Simplenote"
ENV["PROJECT_ROOT_FOLDER"]="./"
ENV["PUBLIC_CONFIG_FILE"]="./config/Version.Public.xcconfig"
ENV["DOWNLOAD_METADATA"]="./fastlane/download_metadata.swift"

USER_ENV_FILE_PATH = File.join(Dir.home, '.simplenotemacos-env.default')

@WORKSPACE = 'Simplenote.xcworkspace'
@INTERNAL_SCHEME = 'Simplenote'
@APP_STORE_SCHEME = 'Simplenote-AppStore'
@BUILD_FOLDER = 'build'

# On CI, it's useful to skip code signing unless necessary to avoid spending
# time syncing the certificates and profiles with match. And while not
# neccessary, it doesn't hurt on a dev machine either.
@SKIP_CODE_SIGNING_XCARGS = {
  COMPILER_INDEX_STORE_ENABLE: 'NO',
  CODE_SIGN_IDENTITY: '',
  CODE_SIGNING_REQUIRED: 'NO',
}

# Use this instead of getting values from ENV directly
# It will throw an error if the requested value is missing
def get_required_env(key)
  unless ENV.key?(key)
    UI.user_error!("Environment variable '#{key}' is not set. Have you setup #{USER_ENV_FILE_PATH} correctly?")
  end
  ENV[key]
end

# Helper function to DRY the code to build the app
def build_simplenote(codesign:, archive_path: nil)
  if codesign
    skip_archive = false
    xcargs = []
  else
    # Skip archiving when not codesigning
    skip_archive = true
    xcargs = @SKIP_CODE_SIGNING_XCARGS
  end

  build_mac_app(
    workspace: @WORKSPACE,
    scheme: @APP_STORE_SCHEME,
    configuration: 'Release',
    clean: true,
    output_directory: @BUILD_FOLDER,
    archive_path: archive_path,
    skip_archive: skip_archive,
    export_method: 'mac-application',
    export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
    xcargs: xcargs,
    # This is required to successfully archive, see
    # https://github.com/fastlane/fastlane/issues/15963#issuecomment-593649185
    skip_package_pkg: true,
  )
end

before_all do
  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    UI.user_error!("~/.simplenotemacos-env.default not found: Please copy fastlane/env/user.env-example to #{USER_ENV_FILE_PATH} and fill in the values")
  end
end

desc 'Runs the unit tests for the project'
lane :test do | options |
  run_tests(
    workspace: @WORKSPACE,
    scheme: @INTERNAL_SCHEME,
    configuration: 'Debug',
    clean: true,
    xcargs: @SKIP_CODE_SIGNING_XCARGS
  )
end

desc 'Builds the app for App Store distribution'
lane :build_app_store do | options |
  build_simplenote(codesign: false)
end

########################################################################
# Release Lanes
########################################################################
  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current develop"
  lane :code_freeze do | options |
    old_version = ios_codefreeze_prechecks(options)

    ios_bump_version_release()
    new_version = ios_get_app_version()
    ios_update_release_notes(new_version: new_version)
    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)

    ios_localize_project()
    ios_tag_build()
    get_prs_list(repository:GHHELPER_REPO, start_tag:"#{old_version}", report_path:"#{File.expand_path('~')}/simplenotemacos_prs_list_#{old_version}_#{new_version}.txt")
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane updates the AppStoreStrings.pot files with the latest content from
  # the release_notes.txt file and the other text sources
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_appstore_strings version:<release note version>
  #
  # Example:
  # bundle exec fastlane update_appstore_strings version:1.1
  #####################################################################################
  desc "Updates the AppStoreStrings.pot file with the latest data"
  lane :update_appstore_strings do | options |
    prj_folder = Pathname.new(File.join(Dir.pwd, "..")).expand_path.to_s
    source_metadata_folder = File.join(prj_folder, "fastlane/appstoreres/metadata/source")

    files = {
      whats_new: File.join(prj_folder,  "/Simplenote/Resources/release_notes.txt"),
      app_store_subtitle: File.join(source_metadata_folder, "subtitle.txt"),
      app_store_desc: File.join(source_metadata_folder, "description.txt"),
      app_store_keywords: File.join(source_metadata_folder, "keywords.txt")
    }

    ios_update_metadata_source(po_file_path: File.join(prj_folder, "/Simplenote/Resources/AppStoreStrings.pot"),
      source_files: files,
      release_version: options[:version])
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc "Updates a release branch for a new beta release"
  lane :new_beta_release do | options |
    ios_betabuild_prechecks(options)
    ios_localize_project()
    ios_update_metadata()
    ios_bump_version_beta()
    ios_tag_build()
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version:10.6.1
  # bundle exec fastlane new_hotfix_release skip_confirm:true version:10.6.1
  #####################################################################################
  desc "Creates a new hotfix branch from the given tag"
  lane :new_hotfix_release do | options |
    prev_ver = ios_hotfix_prechecks(options)
    ios_bump_version_hotfix(previous_version: prev_ver, version: options[:version])
    ios_tag_build()
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata, pushes the final tag and
  # cleans all the temp ones
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc "Removes all the temp tags and puts the final one"
  lane :finalize_release do | options |
    ios_finalize_prechecks(options)
    unless ios_current_branch_is_hotfix
      ios_update_metadata(options)
      ios_bump_version_beta()
    end
    ios_final_tag(options)
  end

  #####################################################################################
  # build_and_upload_beta
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for beta testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_beta [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_beta
  # bundle exec fastlane build_and_upload_beta skip_confirm:true
  #####################################################################################
  desc "Builds and updates for beta distribution"
  lane :build_and_upload_beta do | options |
    ensure_git_status_clean()

    configure_apply()
    sh("rake dependencies:pod:clean")
    cocoapods()

    build_app(
      workspace: WORKSPACE,
      scheme: INTERNAL_SCHEME,
      clean: true,
      output_directory: BUILD_FOLDER
    )

    appcenter_upload(
      api_token: get_required_env("APPCENTER_API_TOKEN"),
      owner_name: "automattic",
      owner_type: "organization",
      app_name: "Simplenote-OSX",
      ipa: "./build/Simplenote.app",
      notify_testers: false
    )

    dSYM_PATH = File.dirname(Dir.pwd) + "/build/Simplenote.app.dSYM.zip"

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'simplenote-macos',
      dsym_path: dSYM_PATH,
    )
  end

  lane :build_and_upload_app_store do | options |
    # This allows code signing to work on CircleCI. It is skipped if this isn't
    # running on CI.
    #
    # See https://circleci.com/docs/2.0/ios-codesigning/
    setup_circle_ci

    sync_code_signing(
      type: 'appstore',
      platform: 'macos',
      # Will default to false, unless a readonly value is specified, or is
      # running on CI, in which case it will always be true.
      readonly: options[:readonly] || is_ci,
      app_identifier: 'com.automattic.SimplenoteMac'
    )

    archive_path = File.join(@BUILD_FOLDER, 'Simplenote-Mac.xcarchive')
    build_simplenote(codesign: true, archive_path: archive_path)

    # TestFlight does not suport macOS but we can use deliver to upload the
    # binary to the App Store by telling it to skip all the metadata,
    # screenshots, etc.
    # deliver(
    #   skip_screenshots: true,
    #   overwrite_screenshots: false,
    #   skip_metadata: true,
    #   skip_app_version_update: true,
    #   skip_binary_upload: false,
    #   force: true, # Skip verification of HTML preview file
    # )

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'simplenotemacos',
      # At the time of writing, there's no way to explicitly configure the
      # dSYM path, but build_mac_app sets it in the environment if successful.
      # See `bundle exec fastlane action build_mac_app`.
      dsym_path: ENV['DSYM_OUTPUT_PATH'],
    )

    # Do not create the GitHub release unless explicitly requested
    next unless options[:create_github_release]

    archive_zip_path = "#{archive_path}.zip"
    zip(path: archive_path, output_path: archive_zip_path)

    create_release(
      repository: GHHELPER_REPO,
      # version: ios_get_app_version(),
      version: "test-#{Time.now.to_i}",
      release_notes_file_path: 'Simplenote/Resources/release_notes.txt',
      release_assets: [archive_zip_path],
      prerelease: options[:prerelease],
    )
  end

########################################################################
# Helper Lanes
########################################################################
desc "Get a list of pull request from `start_tag` to the current state"
lane :get_pullrequests_list do | options |
  get_prs_list(repository:GHHELPER_REPO, start_tag:"#{options[:start_tag]}", report_path:"#{File.expand_path('~')}/simplenotemacos_prs_list.txt")
end
