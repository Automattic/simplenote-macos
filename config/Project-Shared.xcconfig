//
// Project-Shared.xcconfig
//
// Originally generated by BuildSettingExtractor on 4/11/20
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "Version.public.xcconfig"

// Always Search User Paths (Deprecated)
//
// This setting is deprecated as of Xcode 8.3 and may not be supported in future
// versions. It is recommended that you disable the setting.
//
// If enabled, both `#include <header.h>`-style and `#include "header.h"`-style
// directives search the paths in `USER_HEADER_SEARCH_PATHS` before
// `HEADER_SEARCH_PATHS`. As a consequence, user headers, such as your own `String.h`
// header, have precedence over system headers when using `#include <header.h>`. This is
// done using the `-iquote` flag for the paths provided in `USER_HEADER_SEARCH_PATHS`. If
// disabled and your compiler fully supports separate user paths, user headers are only
// accessible with `#include "header.h"`-style preprocessor directives.
//
// For backwards compatibility reasons, this setting is enabled by default. Disabling it
// is strongly recommended.
ALWAYS_SEARCH_USER_PATHS = YES

// Missing Localizability
//
// Warn when a nonlocalized string is passed to a user interface method expecting a
// localized string.
CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES

// Objective-C Automatic Reference Counting
//
// Compiles reference-counted Objective-C code (when garbage collection is not enabled)
// to use Automatic Reference Counting. Code compiled using automated reference counting
// is compatible with other code (such as frameworks) compiled using either manual
// reference counting (for example, traditional `retain` and `release` messages) or
// automated reference counting. Using this mode is currently incompatible with compiling
// code to use Objective-C Garbage Collection.
CLANG_ENABLE_OBJC_ARC = YES

// Duplicate Method Definitions
//
// Warn about declaring the same method more than once within the same `@interface`.
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES

// Block Capture of Autoreleasing
//
// Warn about block captures of implicitly autoreleasing parameters.
CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES

// Implicit Boolean Conversions
//
// Warn about implicit conversions to boolean values that are suspicious. For example,
// writing `if (foo)` where `foo` is the name a function will trigger a warning.
CLANG_WARN_BOOL_CONVERSION = YES

// Suspicious Commas
//
// Warn about suspicious uses of the comma operator.
CLANG_WARN_COMMA = YES

// Implicit Constant Conversions
//
// Warn about implicit conversions of constant values that cause the constant value to
// change, either through a loss of precision, or entirely in its meaning.
CLANG_WARN_CONSTANT_CONVERSION = YES

// Overriding Deprecated Objective-C Methods
//
// Warn if an Objective-C class either subclasses a deprecated class or overrides a
// method that has been marked deprecated or unavailable.
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES

// Empty Loop Bodies
//
// Warn about loop bodies that are suspiciously empty.
CLANG_WARN_EMPTY_BODY = YES

// Implicit Enum Conversions
//
// Warn about implicit conversions between different kinds of enum values. For example,
// this can catch issues when using the wrong enum flag as an argument to a function or
// method.
CLANG_WARN_ENUM_CONVERSION = YES

// Infinite Recursion
//
// Warn if all paths through a function call itself.
CLANG_WARN_INFINITE_RECURSION = YES

// Implicit Integer to Pointer Conversions
//
// Warn about implicit conversions between pointers and integers. For example, this can
// catch issues when one incorrectly intermixes using `NSNumber*`'s and raw integers.
CLANG_WARN_INT_CONVERSION = YES

// Implicit Non-Literal Null Conversions
//
// Warn about non-literal expressions that evaluate to zero being treated as a null
// pointer.
CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES

// Implicit retain of 'self' within blocks
//
// Warn about implicit retains of `self` within blocks, which can create a retain-cycle.
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES

// Implicit Objective-C Literal Conversions
//
// Warn about implicit conversions from Objective-C literals to values of incompatible
// type.
CLANG_WARN_OBJC_LITERAL_CONVERSION = YES

// Quoted Include In Framework Header
//
// Warns when a quoted include is used instead of a framework style include in a
// framework header.
CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES

// Range-based For Loops
//
// Warn about ranged-based for loops.
CLANG_WARN_RANGE_LOOP_ANALYSIS = YES

// Strict Prototypes
//
// Warn about non-prototype declarations.
CLANG_WARN_STRICT_PROTOTYPES = YES

// Suspicious Moves
//
// Warn about suspicious uses of `std::move`.
CLANG_WARN_SUSPICIOUS_MOVE = YES

// Unreachable Code
//
// Warns about potentially unreachable code.
CLANG_WARN_UNREACHABLE_CODE = YES

// Enable Strict Checking of objc_msgSend Calls
//
// Controls whether `objc_msgSend` calls must be cast to the appropriate function pointer
// type before being called.
ENABLE_STRICT_OBJC_MSGSEND = YES

// C Language Dialect
//
// Choose a standard or non-standard C language dialect.
//
// * ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are
// incompatible. [-ansi]
// Incompatible GNU extensions include the `asm`, `inline`, and `typeof` keywords (but
// not the equivalent `\_\_asm\_\_`, `\_\_inline\_\_`, and `\_\_typeof\_\_` forms), and
// the `//` syntax for comments.
// This setting also enables trigraphs.
// * C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// * GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// * C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// * GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// * C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// * GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// * Compiler Default: Tells the compiler to use its default C language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)
GCC_C_LANGUAGE_STANDARD = gnu99

// Enable Objective-C Exceptions
//
// This setting enables `@try`/`@catch`/`@throw` syntax for handling exceptions in
// Objective-C code. Only applies to Objective-C.
GCC_ENABLE_OBJC_EXCEPTIONS = YES

// No Common Blocks
//
// In C, allocate even uninitialized global variables in the data section of the object
// file, rather than generating them as common blocks. This has the effect that if the
// same variable is declared (without `extern`) in two different compilations, you will
// get an error when you link them.
GCC_NO_COMMON_BLOCKS = YES

// Compiler for C/C++/Objective-C
//
// The compiler to use for C, C++, and Objective-C.
GCC_VERSION = com.apple.compilers.llvm.clang.1_0

// Implicit Conversion to 32 Bit Type
//
// Warn if a value is implicitly converted from a 64-bit type to a 32-bit type. This is a
// subset of the warnings provided by -Wconversion.
GCC_WARN_64_TO_32_BIT_CONVERSION = YES

// Missing Function Prototypes
//
// Causes warnings to be emitted about missing prototypes.
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES

// Mismatched Return Type
//
// Causes warnings to be emitted when a function with a defined return type (not `void`)
// contains a return statement without a return-value or when it does not contain any
// return statements. Also emits a warning when a function with a void return type tries
// to return a value.
GCC_WARN_ABOUT_RETURN_TYPE = YES

// Undeclared Selector
//
// Warn if a `@selector(...)` expression referring to an undeclared selector is found. A
// selector is considered undeclared if no method with that name has been declared before
// the `@selector(...)` expression, either explicitly in an `@interface` or `@protocol`
// declaration, or implicitly in an `@implementation` section. This option always
// performs its checks as soon as a `@selector(...)` expression is found, while
// `-Wselector` only performs its checks in the final stage of compilation. This also
// enforces the coding style convention that methods and selectors must be declared
// before being used.
GCC_WARN_UNDECLARED_SELECTOR = YES

// Uninitialized Variables
//
// Warn if a variable might be clobbered by a `setjmp` call or if an automatic variable
// is used without prior initialization.
//
// The compiler may not detect all cases where an automatic variable is initialized or
// all usage patterns that may lead to use prior to initialization. You can toggle
// between the normal uninitialized value checking or the more aggressive (conservative)
// checking, which finds more issues but the checking is much stricter.
GCC_WARN_UNINITIALIZED_AUTOS = YES

// Unused Functions
//
// Warn whenever a static function is declared but not defined or a noninline static
// function is unused.
GCC_WARN_UNUSED_FUNCTION = YES

// Unused Variables
//
// Warn whenever a local variable or nonconstant static variable is unused aside from its
// declaration.
GCC_WARN_UNUSED_VARIABLE = YES

// Runpath Search Paths
//
// This is a list of paths to be added to the `runpath` search path list for the image
// being created. At runtime, `dyld` uses the `runpath` when searching for dylibs whose
// load path begins with `@rpath/`. See [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).
LD_RUNPATH_SEARCH_PATHS = $(inherited)

// Library Search Paths
//
// This is a list of paths to folders to be searched by the linker for libraries used by
// the product. Paths are delimited by whitespace, so any paths with spaces in them need
// to be properly quoted.
LIBRARY_SEARCH_PATHS = $(inherited)

// macOS Deployment Target
//
// Code will load on this and later versions of macOS. Framework APIs that are
// unavailable in earlier versions will be weak-linked; your code should check for `null`
// function pointers or specific system versions before calling newer APIs.
MACOSX_DEPLOYMENT_TARGET = 10.13

// Base SDK
//
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.
SDKROOT = macosx

// Objective-C Bridging Header
//
// Path to the header defining the Objective-C interfaces to be exposed in Swift.
SWIFT_OBJC_BRIDGING_HEADER = Simplenote/Simplenote-Bridging-Header.h

// Objective-C Generated Interface Header Name
//
// Name to use for the header that is generated by the Swift compiler for use in
// `#import` statements in Objective-C.
SWIFT_OBJC_INTERFACE_HEADER_NAME = Simplenote-Swift.h

SWIFT_VERSION = 5.0

// User Header Search Paths
//
// This is a list of paths to folders to be searched by the compiler for included or
// imported user header files (those headers listed in quotes) when compiling C,
// Objective-C, C++, or Objective-C++. Paths are delimited by whitespace, so any paths
// with spaces in them need to be properly quoted. See `ALWAYS_SEARCH_USER_PATHS` for
// more details on how this setting is used. If the compiler doesn't support the concept
// of user headers, then the search paths are prepended to the any existing header search
// paths defined in `HEADER_SEARCH_PATHS`.
USER_HEADER_SEARCH_PATHS = $(BUILT_PRODUCTS_DIR)/**

