//
// SimplenoteTests-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 4/11/20
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

// Always Search User Paths (Deprecated)
//
// This setting is deprecated as of Xcode 8.3 and may not be supported in future
// versions. It is recommended that you disable the setting.
//
// If enabled, both `#include <header.h>`-style and `#include "header.h"`-style
// directives search the paths in `USER_HEADER_SEARCH_PATHS` before
// `HEADER_SEARCH_PATHS`. As a consequence, user headers, such as your own `String.h`
// header, have precedence over system headers when using `#include <header.h>`. This is
// done using the `-iquote` flag for the paths provided in `USER_HEADER_SEARCH_PATHS`. If
// disabled and your compiler fully supports separate user paths, user headers are only
// accessible with `#include "header.h"`-style preprocessor directives.
//
// For backwards compatibility reasons, this setting is enabled by default. Disabling it
// is strongly recommended.

ALWAYS_SEARCH_USER_PATHS = NO

// Bundle Loader
//
// Specifies the executable that will load the bundle output file being linked. Undefined
// symbols from the bundle are checked against the specified executable as if it is one
// of the dynamic libraries the bundle was linked with.

BUNDLE_LOADER = $(TEST_HOST)

// Misuse of 'nonnull'
//
// Check for misuses of `nonnull` parameter and return types.

CLANG_ANALYZER_NONNULL = YES

// Suspicious Conversions of NSNumber and CFNumberRef
//
// Warn when a number object, such as an instance of `NSNumber`, `CFNumberRef`,
// `OSNumber`, or `OSBoolean` is compared or converted to a primitive value instead of
// another object.

CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE

// C++ Language Dialect
//
// Choose a standard or non-standard C++ language dialect. Options include:
//
// * C++98: Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]
// * GNU++98: Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]
// * C++11: Accept the ISO C++ 2011 standard with amendments, but not GNU extensions.
// [-std=c++11]
// * GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions.
// [-std=gnu++11]
// * C++14: Accept the ISO C++ 2014 standard with amendments, but not GNU extensions.
// [-std=c++14]
// * GNU++14: Accept the ISO C++ 2014 standard with amendments and GNU extensions.
// [-std=gnu++14]
// * C++17: Accept the ISO C++ 2017 standard with amendments, but not GNU extensions.
// [-std=c++17]
// * GNU++17: Accept the ISO C++ 2017 standard with amendments and GNU extensions.
// [-std=gnu++17]
// * Compiler Default: Tells the compiler to use its default C++ language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU++98.)

CLANG_CXX_LANGUAGE_STANDARD = gnu++14

// C++ Standard Library
//
// Choose a version of the C++ standard library to use.
//
// * libstdc++: A traditional C++ standard library that works with GCC and Clang
// (default).
// * libc++: A highly optimized C++ standard library that works only with Clang, and is
// designed to support new C++11 features.

CLANG_CXX_LIBRARY = libc++

// Enable Modules (C and Objective-C)
//
// Enables the use of modules for system APIs. System headers are imported as semantic
// modules instead of raw headers. This can result in faster builds and project indexing.

CLANG_ENABLE_MODULES = YES

// Weak References in Manual Retain Release
//
// Compiles Objective-C code to enable weak references for code compiled with manual
// retain release (MRR) semantics.

CLANG_ENABLE_OBJC_WEAK = YES

// Direct usage of 'isa'
//
// Warn about direct accesses to the Objective-C `isa` pointer instead of using a runtime
// API.

CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR

// Documentation Comments
//
// Warns about issues in documentation comments (`doxygen`-style) such as missing or
// incorrect documentation tags.

CLANG_WARN_DOCUMENTATION_COMMENTS = YES

// Unintentional Root Class
//
// Warn about classes that unintentionally do not subclass a root class, such as
// `NSObject`.

CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR

// Unguarded availability
//
// Warn if an API that is newer than the deployment target is used without "if
// (@available(...))" guards.

CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE

// Code Signing Identity
//
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.

CODE_SIGN_IDENTITY = Mac Developer

// Code Signing Style
//
// This setting specifies the method used to acquire and locate signing assets. Choose
// `Automatic` to let Xcode automatically create and update profiles, app IDs, and
// certificates. Choose `Manual` to create and update these yourself on the developer
// website.

CODE_SIGN_STYLE = Manual

// Combine HiDPI Images
//
// Combines image files at different resolutions into one multi-page TIFF file that is
// HiDPI compliant for macOS 10.7 and later. Only image files in the same directory and
// with the same base name and extension are combined. The file names must conform to the
// naming convention used in HiDPI.

COMBINE_HIDPI_IMAGES = YES

// Development Team
//
// The team ID of a development team to use for signing certificates and provisioning
// profiles.

DEVELOPMENT_TEAM = PZYM8XX95Q

// C Language Dialect
//
// Choose a standard or non-standard C language dialect.
//
// * ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are
// incompatible. [-ansi]
// Incompatible GNU extensions include the `asm`, `inline`, and `typeof` keywords (but
// not the equivalent `\_\_asm\_\_`, `\_\_inline\_\_`, and `\_\_typeof\_\_` forms), and
// the `//` syntax for comments.
// This setting also enables trigraphs.
// * C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// * GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// * C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// * GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// * C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// * GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// * Compiler Default: Tells the compiler to use its default C language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)

GCC_C_LANGUAGE_STANDARD = gnu11

// Mismatched Return Type
//
// Causes warnings to be emitted when a function with a defined return type (not `void`)
// contains a return statement without a return-value or when it does not contain any
// return statements. Also emits a warning when a function with a void return type tries
// to return a value.

GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR

// Uninitialized Variables
//
// Warn if a variable might be clobbered by a `setjmp` call or if an automatic variable
// is used without prior initialization.
//
// The compiler may not detect all cases where an automatic variable is initialized or
// all usage patterns that may lead to use prior to initialization. You can toggle
// between the normal uninitialized value checking or the more aggressive (conservative)
// checking, which finds more issues but the checking is much stricter.

GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE

// Info.plist File
//
// The project-relative path to the property list file that contains the `Info.plist`
// information used by bundles. For details on information property list files, see
// [Information Property List
// Files](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/Articles/ConfigFiles.html#//apple_ref/doc/uid/20002091-CJBJIEDH)
// in [Runtime Configuration
// Guidelines](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/000-Introduction/introduction.html).

INFOPLIST_FILE = SimplenoteTests/Info.plist

// Runpath Search Paths
//
// This is a list of paths to be added to the `runpath` search path list for the image
// being created. At runtime, `dyld` uses the `runpath` when searching for dylibs whose
// load path begins with `@rpath/`. See [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).

LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/../Frameworks @loader_path/../Frameworks

MTL_FAST_MATH = YES

// Product Bundle Identifier
//
// A string that uniquely identifies the bundle. The string should be in reverse DNS
// format using only alphanumeric characters (`A-Z`, `a-z`, `0-9`), the dot (`.`), and
// the hyphen (`-`). This value is used as the `CFBundleIdentifier` in the `Info.plist`
// of the built bundle.

PRODUCT_BUNDLE_IDENTIFIER = com.automattic.SimplenoteMac.betatests

// Product Name
//
// This is the basename of the product generated by the target.

PRODUCT_NAME = $(TARGET_NAME)

// Provisioning Profile
//
// Must contain a profile name (or UUID). A missing or invalid profile will cause a build
// error. Use in conjunction with [DEVELOPMENT_TEAM] to fully specify provisioning
// profile.

PROVISIONING_PROFILE_SPECIFIER =

// Swift Language Version
//
//

SWIFT_VERSION = 5.0

// Test Host
//
// Path to the executable into which a bundle of tests is injected. Only specify this
// setting if testing an application or other executable.

TEST_HOST = $(BUILT_PRODUCTS_DIR)/Simplenote.app/Contents/MacOS/Simplenote
